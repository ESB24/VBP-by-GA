begin
    using Distributions
end

function normalize(arr::Vector{Float64})
    min_val = minimum(arr)
    max_val = maximum(arr)
    
    # Normalize to [0, 1]
    normalized = (arr .- min_val) ./ (max_val - min_val)
    
    # Scale to [-1, 1]
    # normalized = 2 .* normalized .- 1
    
    return normalized
end

function distrib_trafic_batchSize(O::Int64)
    batch_count::Union{Vector{Float64}, Nothing} = nothing

    if O == 20
        batch_count = [951.0, 197.0, 73.0, 34.0, 15.0, 10.0, 5.0, 9.0, 3.0, 4.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    elseif O == 40
        batch_count = [1911.0, 505.0, 155.0, 69.0, 27.0, 19.0, 7.0, 16.0, 9.0, 2.0, 3.0, 3.0, 4.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    elseif O == 80
        batch_count = [3554.0, 916.0, 290.0, 122.0, 55.0, 31.0, 22.0, 25.0, 9.0, 5.0, 9.0, 9.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
     elseif O == 100
        batch_count = [4702.0, 1148.0, 382.0, 156.0, 80.0, 41.0, 30.0, 37.0, 15.0, 5.0, 14.0, 6.0, 6.0, 6.0, 3.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    elseif O == 150
        batch_count = [7539.0, 1984.0, 616.0, 280.0, 106.0, 76.0, 45.0, 49.0, 14.0, 12.0, 7.0, 5.0, 12.0, 7.0, 4.0, 3.0, 5.0, 2.0, 1.0, 1.0, 2.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    elseif O == 200
        batch_count = [9453.0, 2518.0, 704.0, 338.0, 111.0, 89.0, 42.0, 99.0, 20.0, 27.0, 15.0, 11.0, 4.0, 7.0, 3.0, 3.0, 6.0, 2.0, 1.0, 1.0, 4.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    end

    distrib = normalize(batch_count)

    total = sum(distrib)

    distrib ./= total

    return Categorical(distrib)
end

function distrib_trafic_batchCount(O::Int64)
    batch_count::Union{Vector{Float64}, Nothing} = nothing

    if O == 20
        batch_count = [3.0, 13.0, 39.0, 27.0, 17.0, 15.0, 18.0, 16.0, 11.0, 7.0, 10.0, 6.0, 6.0, 4.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0]
    elseif O == 40
        batch_count = [0.0, 0.0, 3.0, 6.0, 10.0, 13.0, 17.0, 13.0, 19.0, 11.0, 7.0, 18.0, 9.0, 4.0, 8.0, 7.0, 5.0, 6.0, 3.0, 6.0, 4.0, 1.0, 1.0, 1.0, 5.0, 1.0, 3.0, 2.0, 2.0, 1.0, 4.0, 1.0, 4.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 1.0]
    elseif O == 80
        batch_count = [0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 2.0, 3.0, 5.0, 8.0, 10.0, 10.0, 7.0, 9.0, 12.0, 6.0, 11.0, 7.0, 1.0, 7.0, 6.0, 6.0, 4.0, 0.0, 7.0, 4.0, 7.0, 3.0, 5.0, 4.0, 3.0, 0.0, 2.0, 2.0, 1.0, 2.0, 4.0, 4.0, 1.0, 2.0, 1.0, 3.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 5.0, 2.0, 1.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0]
    elseif O == 100
        batch_count = [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 4.0, 2.0, 6.0, 4.0, 3.0, 5.0, 6.0, 3.0, 11.0, 6.0, 3.0, 8.0, 5.0, 5.0, 5.0, 5.0, 4.0, 4.0, 3.0, 2.0, 7.0, 5.0, 6.0, 4.0, 5.0, 2.0, 1.0, 3.0, 3.0, 3.0, 3.0, 1.0, 3.0, 2.0, 3.0, 0.0, 3.0, 3.0, 1.0, 4.0, 1.0, 3.0, 2.0, 2.0, 1.0, 2.0, 3.0, 0.0, 0.0, 1.0, 0.0, 3.0, 2.0, 4.0, 3.0, 0.0, 0.0, 0.0, 3.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0]
    elseif O == 150
        batch_count = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 7.0, 3.0, 4.0, 4.0, 1.0, 7.0, 0.0, 1.0, 2.0, 5.0, 2.0, 2.0, 2.0, 0.0, 4.0, 2.0, 5.0, 7.0, 2.0, 7.0, 5.0, 0.0, 1.0, 2.0, 4.0, 1.0, 1.0, 2.0, 3.0, 2.0, 4.0, 2.0, 3.0, 1.0, 2.0, 5.0, 6.0, 3.0, 1.0, 2.0, 2.0, 2.0, 2.0, 4.0, 0.0, 0.0, 3.0, 1.0, 4.0, 0.0, 0.0, 2.0, 2.0, 1.0, 1.0, 2.0, 0.0, 3.0, 0.0, 1.0, 2.0, 1.0, 1.0, 3.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 3.0, 2.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 0.0, 5.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    elseif O == 200
        batch_count = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 6.0, 3.0, 1.0, 1.0, 1.0, 5.0, 6.0, 4.0, 5.0, 2.0, 5.0, 1.0, 7.0, 5.0, 2.0, 1.0, 1.0, 1.0, 0.0, 3.0, 3.0, 6.0, 2.0, 1.0, 4.0, 3.0, 2.0, 1.0, 8.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 0.0, 6.0, 1.0, 0.0, 2.0, 2.0, 3.0, 1.0, 6.0, 2.0, 3.0, 2.0, 1.0, 0.0, 3.0, 2.0, 0.0, 1.0, 0.0, 4.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 2.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 2.0, 1.0, 1.0, 0.0, 3.0, 1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 4.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    end

    distrib = normalize(batch_count)

    total = sum(distrib)

    distrib ./= total

    return Categorical(distrib)
end

function distrib_1onN(O::Int64)
    step = 1/O

    range = 0.01:step:(1.01 - step) # distrib of 1/N in [0.5, 1.5] range

    distrib = 1.0 ./ range

    distrib = normalize(distrib)

    total = sum(distrib)

    distrib ./= total # now sum(distrib) = 1.0
    
    return Categorical(distrib)
end

function distrib_uniform(n::Int64)
    return Categorical([1/n for _=1:n])
end